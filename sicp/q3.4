(define (make-account password balance)
    (let ((try-times 0)
        (max-try-times 3))
    (define (reset-try-times)
        (set! try-times 0)
    )
    (define (add-try-times)
        (set! try-times (+ try-times 1))
    )
    (define (display-wrong-password useless-arg)
        "wrong password"
    )
    (define (call-police useless-arg)
        "call-police"
    )
    (define (password-match? given-password)
        (eq? given-password password)
    )
    (define (withdraw n)
        (cond ((< n balance) (begin (set! balance (- balance n)) balance))
              (else (begin (resetcounter) "insufficient funs"))
        )
    )
    (define (deposit n)
        (begin (set! balance (+ balance n)) balance)
    )
    (define (dispatch pass method)
        (if (password-match? pass) 
            (begin (set! try-times 0)
                   (cond ((eq? method 'withdraw) withdraw)
                        ((eq? method 'deposit) deposit))
            )
            (begin
                (set! try-times (+ 1 try-times))
                (if (>= try-times max-try-times)
                    call-police
                    display-wrong-password)
                ;(if (>= try-times max-try-times)
                    ;call-police
                    ;display-wrong-password)
            )
        )
    )
    dispatch)
)

(define account (make-account 'abc 100))
((account 'abc 'withdraw) 300)
((account 'abc 'deposit) 200)
((account 'wrongpass 'withdraw) 10)
((account 'wrongpass 'withdraw) 10)
((account 'wrongpass 'withdraw) 10)
((account 'wrongpass 'withdraw) 10)
