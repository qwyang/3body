(define (accumulate func result lst)
    (cond ((null? lst) result)
          (else (func (car lst) (accumulate func result (cdr lst))))
    )
)

(define (flat-map func lst)
    (accumulate append () (map func lst))
)

(define (enumerate-interval a b)
    (if (> a b)
        ()
        (cons a (enumerate-interval (+ a 1) b))
    )
)

;(i,j) 1<=j<i<=n
(enumerate-interval 1 10)
(define (enumerate-pair n)
    (flat-map 
        (lambda (i) (
            map (lambda (x) (list i x)) (enumerate-interval 1 (- i 1))
        ))
        (enumerate-interval 1 n)
    )
)

(enumerate-pair 10)
;pair(n,k)=(i+pair(i-1,k-1))
(define (enumerate-3pair n)
    (flat-map
        (lambda (i) (map (lambda (x) (cons i x))
                        (enumerate-pair (- i 1))))
        (enumerate-interval 1 n)
    )
)
(enumerate-3pair 5)
(define (enumerate-3sum n)
    (filter (lambda (x) (= n (accumulate + 0 x))) (enumerate-3pair n))
)
(enumerate-3sum 10)
