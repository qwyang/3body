;区间算术,构造函数和选择函数
(define (make-interval a b)
    (cons a b)
)
(define (make-center-width c w)
    (make-interval (- c w) (+ c w))
)
(define (make-center-percent c p)
    (let ((w (* c (/ p 100.0))))
        (make-center-width c w)
    )
)
(define (lower-bound val)
    (car val)
)
(define (uper-bound val)
    (cdr val)
)
(define (width a)
    (/ (- (uper-bound a) (lower-bound a)) 2)
)
(define (center a)
    (/ (+ (uper-bound a) (lower-bound a)) 2)
)

;区间运算add
(define (add-interval a b)
    (let ((a1 (lower-bound a))
        (b1 (lower-bound b))
        (a2 (uper-bound a))
        (b2 (uper-bound b)))
        (make-interval (+ a1 b1) (+ a2 b2))
    ))
;区间运算sub
(define (sub-interval a b)
    (let ((a1 (lower-bound a))
        (b1 (lower-bound b))
        (a2 (uper-bound a))
        (b2 (uper-bound b)))
        (make-interval (- a1 b2) (- a2 b1))
    ))
;区间类型(-1负区间 0跨区间 1正区间)
(define (type-interval a)
    (cond ((< (uper-bound a) 0) -1)
          ((> (lower-bound a) 0) 1)
          (else 0))
)

;区间运算mul
(define (mul-interval a b)
    (let ((t1 (type-interval a))
          (t2 (type-interval b))
          (a1 (lower-bound a))
          (b1 (lower-bound b))
          (a2 (uper-bound a))
          (b2 (uper-bound b))
        )
        (cond ((and (= t1 -1) (= t2 -1)) (make-interval (* a2 b2) (* a1 b1)));(a2b2,a1b1)
              ((and (= t1 -1) (= t2 0)) (make-interval (* a1 b2) (* b1 a2)));(a1b2,a1b1)
              ((and (= t1 -1) (= t2 1)) (make-interval (* a1 b2) (* b1 a2)));(a1b2,a2b1)
              ((and (= t1 0) (= t2 -1)) (make-interval (* a2 b1) (* a1 b1)));(b1a2,a1b1)
              ((and (= t1 0) (= t2 0)) (make-interval (min (* a1 b2) (* a2 b1)) (max (* a1 b1) (* a2 b2))))
              ((and (= t1 0) (= t2 1)) (make-interval (* a1 b2) (* a2 b2)));(a1b2,a2b2)
              ((and (= t1 1) (= t2 -1)) (make-interval (* a2 b1) (* a1 b2)));(a2b1,a1b2)
              ((and (= t1 1) (= t2 0)) (make-interval (* a2 b1) (* a2 b2)));(a2b1,a2b2)
              ((and (= t1 1) (= t2 1)) (make-interval (* a1 b1) (* a2 b2)));(a1b1,a2b2)
        )
    )
)
;区间运行div
(define (div-interval a b)
    (let ((t2 (type-interval b)))
        (if (= t2 0) 
            (exit )
            (mul-interval a (make-interval (/ 1 (uper-bound b)) (/ 1 (lower-bound b))))
        )
    )
)
;区间测试
(define v1 (make-interval -4 2))
(define v2 (make-interval -3 4))
(define v3 (make-center-width 1 0.5))
(add-interval v1 v2)
(sub-interval v1 v2)
(mul-interval v1 v2)
(div-interval v1 v2)
(mul-interval v1 v3)
(define v4 (make-center-percent 5 5))
(mul-interval v4 v4)

(define (par1 r1 r2)
    (div-interval (mul-interval r1 r2) (add-interval r1 r2))
)
(define (par2 r1 r2)
    (let ((one (make-interval 1 1)))
         (div-interval one (add-interval (div-interval one r1) (div-interval one r2)))
    )
)
(define v5 (make-center-percent 1 5))
(div-interval v5 v5)

