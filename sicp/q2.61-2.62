(define (adjoin x set)
    (cond ((< x (car set)) (cons x set))
          ((= x (car set)) set)
          ((> x (car set)) (cons (car set) (adjoin x (cdr set))))
    )
)
(define (union-set set1 set2)
    (cond ((null? set1) set2)
          ((null? set2) set1)
          ((= (car set1) (car set2)) (car set1) (cons (car set1) (union-set (cdr set1) (cdr set2))))
          ((< (car set1) (car set2)) (cons (car set1) (union-set (cdr set1) set2)))
          ((> (car set1) (car set2)) (cons (car set2) (union-set set1 (cdr set2))))
    )
)

(adjoin 2 (list 1 3 5))
(union-set (list 1 3 5) (list 2 4 5 7))
