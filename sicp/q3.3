(define (make-accumulator n)
    (lambda (extra) 
        (begin
            (set! n (+ n extra))
            n
        )
    )
)

(define A (make-accumulator 5))
(A 10)
(A 10)

(define (make-monitored func)
    (let ((counter 0))
        (lambda (n)
            (cond ((eq? n 'how-many-calls) counter)
                  ((eq? n 'reset-counter) (begin (set! counter 0) 0))
                  (else (begin (set! counter (+ counter 1)) (func n)))
            )
        )
    )
)

(define sqrt (make-monitored sqrt))
(sqrt 100)
(sqrt 1)
(sqrt 'how-many-calls)
(sqrt 'reset-counter)
(sqrt 'how-many-calls)

(define (make-account password balance)
    (define (display-wrong-password useless-arg)
        "wrong password"
    )
    (define (password-match? given-password)
        (eq? given-password password)
    )
    (define (withdraw n)
        (cond ((< n balance) (begin (set! balance (- balance n)) balance))
              (else (begin (resetcounter) "insufficient funs"))
        )
    )
    (define (deposit n)
        (begin (set! balance (+ balance n)) balance)
    )
    (define (dispatch pass method)
        (if (password-match? pass) 
            (cond 
              ((eq? method 'withdraw) withdraw)
              ((eq? method 'deposit) deposit)
            )
            display-wrong-password
        )
    )
    dispatch
)

(define account (make-account 'abc 100))
((account 'abc 'withdraw) 300)
((account 'abc 'deposit) 200)
((account 'wrongpass 'withdraw) 10)
