(define (mlength iterms)
    ;循环不变式:c+len(iterms)
    (define (iter iterms c)
        (if (null? iterms)
            c
            (iter (cdr iterms) (+ c 1))
        )
    )
    (iter iterms 0)
)
;循环不变式c+index(iterms)
(define (list-ref iterms c)
    (if (= c 0)
        (car iterms)
        (list-ref (cdr iterms) (- c 1))
    )
)
(define (lastpair l)
    (if (null? (cdr l)) 
        l
        (lastpair (cdr l))
    )
)
;不正确的版本
(define (mreverse l)
    (cond ((null? l) ())
        (else (cons (mreverse (cdr l)) (car l)))
    )
)
;正确的版本，循环不变量：len(l)+len(r)不变
(define (mreverse l)
    (define (iter l r)
        (if (null? l)
            r
            (iter (cdr l) (cons (car l) r))
        )
    )
    (iter l ())
)
(define (mappend l1 l2)
    (if (null? l1)
        l2
        (cons (car l1) (append (cdr l1) l2))
    )
)
(define l (list 1 2 3 4))
(mlength l)
(list-ref l 2)
(mappend l l)
(lastpair l)
(mreverse l)


