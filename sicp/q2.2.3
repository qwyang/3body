(define (accumulate func result lst)
    (cond ((null? lst) result)
          (else (func (car lst) (accumulate func result (cdr lst))))
    )
)

(define (flat-map func lst)
    (accumulate append () (map func lst))
)

(define (enumerate-interval a b)
    (if (> a b)
        ()
        (cons a (enumerate-interval (+ a 1) b))
    )
)

;(i,j) 1<=j<i<=n
(enumerate-interval 1 10)
(define (enumerate-pair n)
    (flat-map 
        (lambda (i) (
            map (lambda (x) (list i x)) (enumerate-interval 1 (- i 1))
        ))
        (enumerate-interval 1 n)
    )
)

(enumerate-pair 10)

(define (even? x)
    (= 0 (remainder x 2))
)
(define (square x)
    (* x x)
)
(define (expmod b e m)
    (cond ((= e 0) 1)
          ((even? e) (remainder (square (expmod b (/ e 2) m)) m))
          (else (remainder (* b (expmod b (- e 1) m)) m))
    )
)

(define (fermat-test n)
    (= 1 (expmod (+ 1 (random (- n 1))) (- n 1) n))
)

(define (fast-prime? n times)
    (cond ((= 0 times) true)
          ((fermat-test n) (fast-prime? n (- times 1)))
          (else false)
    )
)
;s的全排列等于P(s) = Insert(x P(s-x));(x belongs to s).
(define (permutations s)
    (if (null? s)
        (list ())
        (flat-map (lambda (x) 
                    (map (lambda (p) (cons x p))  
                        (permutations (remove x s))))
        s)
    )
)
(define (remove x s)
    (filter (lambda (e) (not (= e x))) s)
)

(remove 1 (list 1 2 3))
(permutations ())
(permutations (list 1))
(permutations (list 1 2))
(permutations (list 1 2 3))
